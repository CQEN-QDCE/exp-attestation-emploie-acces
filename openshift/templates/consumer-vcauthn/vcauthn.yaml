######################################################################
# oc process -f ./keycloak.yaml --param-file=./keycloak.dev.params | oc apply -f -
######################################################################
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: ${APP_NAME}
  annotations:
    description: Contrôleur et agent consommateur Aries supportant la révocation basé sur Aries Cloud Agent Python (ACA-Py) pour l'authentification vcauthn-oidc.
    tags: CQEN, Hyperledger, ARIES, Indy, Keycloak, PostgreSql
objects:
######################################################################
# Database (PostgreSQL)
######################################################################
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${POSTGRESQL_NAME}-files
    labels:
      name: ${POSTGRESQL_NAME}-files
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: database
      env: ${ENV_NAME}
  spec:
    storageClassName: ${STORAGE_CLASS_NAME}
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_SIZE}

- kind: Service
  apiVersion: v1
  metadata:
    name: ${POSTGRESQL_NAME}
    labels:
      name: ${POSTGRESQL_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: database
      env: ${ENV_NAME}
  spec:
    ports:
    - name: ${POSTGRESQL_NAME}
      protocol: TCP
      port: ${{POSTGRESQL_PORT}}
      targetPort: ${{POSTGRESQL_PORT}}
      nodePort: 0
    selector:
      name: ${POSTGRESQL_NAME}
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${POSTGRESQL_NAME}
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    labels:
      name: ${POSTGRESQL_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: database
      env: ${ENV_NAME}
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${POSTGRESQL_NAME}
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${POSTGRESQL_NAME}
    template:
      metadata:
        labels:
          name: ${POSTGRESQL_NAME}
      spec:
        containers:
        - name: ${POSTGRESQL_NAME}
          image:
          ports:
          - containerPort: ${{POSTGRESQL_PORT}}
            protocol: TCP
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            exec:
# TODO, chercher comment utiliser les variables de nos secret au lieu de coder en dur pour la commande du readinessProbe
#              command:
#                - /bin/sh
#                - -i
#                - -c
#                - psql -h 127.0.0.1 -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE_NAME
#                - psql -h 0.0.0.0 -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE_NAME
#                - psql -w -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE_NAME
#                  -c 'SELECT 1'
#              command: ["psql", "-w", "-U", ${{POSTGRESQL_USER}}, "-d", ${{POSTGRESQL_DATABASE_NAME}}, "-c", "SELECT 1"]
              command: ["psql", "-w", "-U", "dbuser", "-d", "postgres", "-c", "SELECT 1"]
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 120
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: ${POSTGRESQL_NAME}
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${POSTGRESQL_NAME}
                key: database-password
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${POSTGRESQL_NAME}
                key: database-name
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${POSTGRESQL_NAME}
                key: database-admin-password                
          volumeMounts:
          - name: ${POSTGRESQL_NAME}-files
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: ${POSTGRESQL_NAME}-files
          persistentVolumeClaim:
            claimName: ${POSTGRESQL_NAME}-files
        restartPolicy: Always
        dnsPolicy: ClusterFirst
  status: {}

######################################################################
# Secrets
######################################################################
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${POSTGRESQL_NAME}
    labels:
      name: ${POSTGRESQL_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: database
      env: ${ENV_NAME}
    annotations:
      template.openshift.io/expose-database-user: "{.data['database-user']}"
      template.openshift.io/expose-database-password: "{.data['database-password']}"
      template.openshift.io/expose-database-admin-user: "{.data['database-admin-user']}"
      template.openshift.io/expose-database-admin-password: "{.data['database-admin-password']}"
      template.openshift.io/expose-database-name: "{.data['database-name']}"
  stringData:
    database-user: "dbuser"
    database-password: "${POSTGRESQL_PASSWORD}"
    database-admin-user: "postgres"
    database-admin-password: "${POSTGRESQL_ADMIN_PASSWORD}"
    database-name: "${POSTGRESQL_DATABASE_NAME}"
  type: Opaque

######################################################################
# ACA-py Issuer
######################################################################
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: ${ACAPY_NAME}-allow-ingress
    labels:
      name: ${ACAPY_NAME}-allow-ingress
      app: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
  spec:
    description: |
      Allow traffic from routes into the ${ROLE} container(s).
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                network.openshift.io/policy-group: ingress
    podSelector:
      matchLabels:
        role: ${ROLE}
        app: ${APP_NAME}${SUFFIX}
        env: ${ENV_NAME}
    policyTypes:
      - Ingress

- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: ${ACAPY_NAME}
    labels:
      name: ${ACAPY_NAME}
      app: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
  spec:
    description: |
      Allow the API to access the agent admin interface.
    ingress:
      - from:
          - podSelector:
              matchLabels:
                role: ${API_ROLE}
                app: ${APP_NAME}${SUFFIX}
                env: ${ENV_NAME}
            namespaceSelector:
              matchLabels:
                environment: ${ENV_NAME}
        ports:
          - protocol: TCP
            port: ${{AGENT_ADMIN_PORT}}
    podSelector:
      matchLabels:
        role: ${ROLE}
        app: ${APP_NAME}${SUFFIX}
        env: ${ENV_NAME}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${ACAPY_NAME}
    labels:
      name: ${ACAPY_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
    annotations:
      description: Defines how to deploy the application server
      app.openshift.io/connects-to: >-
        [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${POSTGRESQL_NAME}"},
        {"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${TAILS_SERVER_NAME}"}]
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      name: ${ACAPY_NAME}
    template:
      metadata:
        name: ${ACAPY_NAME}
        labels:
          name: ${ACAPY_NAME}
          app: ${APP_NAME}${SUFFIX}
          app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
          app-group: ${APP_GROUP}
          role: ${ROLE}
          env: ${ENV_NAME}
        annotations:
          description: Defines how to deploy the ${ACAPY_NAME} server
          app.openshift.io/connects-to: >-
            [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${POSTGRESQL_NAME}"},
            {"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${TAILS_SERVER_NAME}"}]
      spec:
        containers:
          - name: ${ACAPY_NAME}
            command:
              - bash
              - -c
              - $(echo aca-py start
                -it http 0.0.0.0 ${AGENT_PORT}
                -ot http
                --auto-accept-invites
                --auto-accept-requests
                --auto-provision
                --wallet-type 'indy'
                --admin '0.0.0.0' ${ADMIN_PORT}
                --admin-api-key ${AGENT_ADMIN_API_KEY}
                --log-level ${AGENT_LOG_LEVEL});
            env:
              - name: ADMIN_PORT
                value: ${AGENT_ADMIN_PORT}
              - name: AGENT_PORT
                value: ${AGENT_HTTP_PORT}
              - name: ACAPY_WALLET_NAME
                value: ${APP_NAME}
              - name: ACAPY_WALLET_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${ACAPY_NAME}
                    key: master-key
              - name: ACAPY_WALLET_SEED
                valueFrom:
                  secretKeyRef:
                    name: ${ACAPY_NAME}
                    key: agent-did-seed
              - name: AGENT_ADMIN_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${ACAPY_NAME}
                    key: admin-api-key
              - name: ACAPY_GENESIS_URL
                value: ${GENESIS_FILE_URL}
              - name: ACAPY_ENDPOINT
                value: https://${AGENT_SUBDOMAIN}.${APP_DOMAIN}
              - name: ACAPY_WEBHOOK_URL
                value: ${WEBHOOK_URL}
              - name: ACAPY_LABEL
                value: ${ACAPY_LABEL}
              - name: ACAPY_READ_ONLY_LEDGER
                value: 'false'
              - name: AGENT_LOG_LEVEL
                value: ${LOG_LEVEL}
            image: "bcgovimages/aries-cloudagent:py36-1.16-1_0.7.3"
            ports:
              - containerPort: ${{AGENT_ADMIN_PORT}}
                protocol: TCP
              - containerPort: ${{AGENT_HTTP_PORT}}
                protocol: TCP
#            readinessProbe:
#              timeoutSeconds: 30
#              initialDelaySeconds: 3
#              exec:
#                command:
#                  - bash
#                  - "-c"
#                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/ready" -H "X-API-KEY: ${ADMIN_API_KEY}"'
#            livenessProbe:
#              timeoutSeconds: 30
#              initialDelaySeconds: 300
#              exec:
#                command:
#                  - bash
#                  - "-c"
#                  - 'curl --fail "http://localhost:${ADMIN_INTERFACE_PORT}/status/live" -H "X-API-KEY: ${ADMIN_API_KEY}"'
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            imagePullPolicy: IfNotPresent
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
        initContainers:
        - name: init-db
          image: busybox
          command: ['sh', '-c']
          args: ["until nc -z ${POSTGRESQL_NAME}:\"${POSTGRESQL_PORT}\"; do echo waiting for db; sleep 2; done;"]
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: ${TAILS_SERVER_NAME}-files
          persistentVolumeClaim:
            claimName: ${TAILS_SERVER_NAME}-files
  status: {}

- kind: Service
  apiVersion: v1
  metadata:
    name: ${ACAPY_NAME}
    labels:
      name: ${ACAPY_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
  spec:
    selector:
      name: ${ACAPY_NAME}
    ports:
      - name: '3000'
        protocol: TCP
        port: ${{AGENT_ADMIN_PORT}}
        targetPort: ${{AGENT_ADMIN_PORT}}
      - name: '8000'
        protocol: TCP
        port: ${{AGENT_HTTP_PORT}}
        targetPort: ${{AGENT_HTTP_PORT}}

- kind: Route
  apiVersion: v1
  metadata:
    name: ${ACAPY_NAME}
    labels:
      name: ${ACAPY_NAME}-http
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
    annotations:
      haproxy.router.openshift.io/timeout: ${ROUTE_TIMEOUT}
  spec:
    host: ${AGENT_SUBDOMAIN}.${APP_DOMAIN}
    to:
      kind: Service
      name: ${ACAPY_NAME}
      weight: 100
    port:
      targetPort: ${{AGENT_HTTP_PORT}}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: None
    wildcardPolicy: None
  status:
    ingress:
      - host: ${AGENT_SUBDOMAIN}.${APP_DOMAIN}
        routerName: default
        conditions:
          - type: Admitted
            status: 'True'
        wildcardPolicy: None
        routerCanonicalHostname: ${APP_DOMAIN}

- kind: Route
  apiVersion: v1
  metadata:
    name: ${ACAPY_NAME}-admin
    labels:
      name: ${ACAPY_NAME}-admin
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
    annotations:
      haproxy.router.openshift.io/timeout: ${ROUTE_TIMEOUT}
  spec:
    host: ${AGENT_SUBDOMAIN}-admin.${APP_DOMAIN}
    to:
      kind: Service
      name: ${ACAPY_NAME}
      weight: 100
    port:
      targetPort: ${{AGENT_ADMIN_PORT}}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: None
    wildcardPolicy: None
  status:
    ingress:
      - host: ${AGENT_SUBDOMAIN}-admin.${APP_DOMAIN}
        routerName: default
        conditions:
          - type: Admitted
            status: 'True'
        wildcardPolicy: None
        routerCanonicalHostname: ${APP_DOMAIN}

######################################################################
# Secrets
######################################################################
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${ACAPY_NAME}
    labels:
      name: ${ACAPY_NAME}
      app: ${APP_NAME}${SUFFIX}
      app.kubernetes.io/part-of: ${APP_NAME}${SUFFIX}
      app-group: ${APP_GROUP}
      role: ${ROLE}
      env: ${ENV_NAME}
    annotations:
      template.openshift.io/expose-master-key: "{.data['master-key']}"
      template.openshift.io/expose-admin-api-key: "{.data['admin-api-key']}"
      template.openshift.io/expose-agent-did-seed: "{.data['agent-did-seed']}"
      template.openshift.io/expose-admin-agent-did: "{.data['agent-did']}"
      template.openshift.io/expose-webhook-url: "{.data['webhook-url']}"
  stringData:
    master-key: "${WALLET_ENCRYPTION_KEY}"
    admin-api-key: "${ADMIN_API_KEY}"
    agent-did-seed: "${AGENT_DID_SEED}"
    agent-did: "${AGENT_DID}"
    webhook-url: "${WEBHOOK_URL}"
  type: Opaque

######################################################################
# Parameters
######################################################################
parameters:
- name: ENV_NAME
  displayName: Environment TAG name
  description: The TAG name for this environment, e.g., dev, test, prod.
  required: true
  value: 'dev'
- name: APP_NAME
  displayName: Application name
  description: Used to group components together in the OpenShift console.
  required: true
  value: 'vc-authn-oidc'
- name: APP_GROUP
  displayName: App Group
  description: Used to group components together.
  required: true
  value: 'vc-authn-oidc'
- name: SUFFIX
  displayName: Suffix
  description: A suffix applied to all the objects in this template.
  required: false
  value: ''
- name: POSTGRESQL_NAME
  displayName: PostgreSQL name
  description: The name assigned to all PostgreSQL objects defined in this template.
  required: true
  value: 'database'
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL connection password
  description: Password for the PostgreSQL connection user. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL administrator password
  description: Password for the PostgreSQL administrative account. Needs to be basee64 encoded.
  required: true
  generate: "expression"
  from: "[a-zA-Z0-9]{16}"
- name: POSTGRESQL_DATABASE_NAME
  displayName: PostgreSQL database name
  description: Name of the PostgreSQL database.
  required: true
  value: 'postgres'
- name: POSTGRESQL_HOST
  displayName: PostgreSql hostname
  required: true
  description: Hostname of the deployed PostgreSql database. Only used when database_STORAGE_TYPE = postgres_storage.
  value: 'postgres'
- name: POSTGRESQL_PORT
  displayName: PostgreSql key management service port
  required: true
  description: The port number of the deployed PostgreSql database. Only used when database_STORAGE_TYPE = postgres_storage.
  value: '5432'
- name: POSTGRESQL_VOLUME_SIZE
  displayName: PostgreSql volume size
  description: The size of the PostgreSql persistent volume, e.g. 512Mi, 1Gi, 2Gi.
  required: true
  value: '1Gi'
- name: STORAGE_CLASS_NAME
  displayNgp2iption: The storage class of the volume.
  required: true
  value: 'gp2'
